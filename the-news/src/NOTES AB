plan for this week

m - planning
t - error handling
w - voting and optimistic rendering
t - Q&A and pagination
f - hand in by now to tutor

m - final submissions

Paul's example plan for an app (on paper, I have done it on screen)

view 1: "/", maybe "/topics/:topic"?

header
links to topics
log in information
sortby options
list of all the articles, with each one being clickable

axios reqs:
api/articles
api/topics

view 2: "/articles/:article_id"
header
links to topics
log in information
sortby options
individual articles
comments

axios reqs:
api/articles/:article_id
api/topics
api/articles/:article_id/comments

#############
APP STRUCTURE

app
 - header
   - loggedInUser
 - nav
   - topics
Router
 - articleslist
   - articlecard
     - information
     - voter
/Router

app 
 - header
   - loggedInUser
- nav
  - topics
Router
- singlearticle
  - comments
/Router

######################################################
Notes from wednesday lecture:

optimistic rendering
when it just shows you what you did, not what everyone did at the same time (EG facebook likes)
rendering just for you, without having to do another fetch request

there is a scale as to whether we want to optimistically render, or do a fetch for data...
top of the scale - likes on facebook (give an indication that it happened)
near the top - voting
middle - deleting / posting an article / comment
bottom of the scale - bank transaction (wait for response to confirm)

...

other notes - do i want to extract the article card from articles list?

posting a comment note:

app
  - singlearticle (state = article)
    - comments (state = comments: [])
      - comment 

...









